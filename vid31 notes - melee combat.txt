Add new StaticEntity subclass called SignPost.

KeyManager class added a new set of boolean variables to hold direction of attacking (movement is handled by WASD keys, now attack direction is handled by arrow keys). 

Moved health variable (and the constant DEFAULT_HEALTH and the line of code in the constructor that initializes the health variable to the DEFAULT_HEALTH) from Creature class to Entity class. So now, instead of Creature objects having health, every single Entity will have a health variable. 

Entity class has a new boolean variable called active that is set to true to begin with, it will control whether an instance of Entity will remain in the game and whether EntityManager will remove(Entity) that instance from its list. Getters and setters for health and active variables. 

Entity class also has a new method called hurt(int) which decreases that Entity's health by the int value passed into as an argument. The hurt(int) method also checks whether or not to switch the active variable (flag) to false AND calls the die() method (which can be used to drop LOOT, trigger an EXPLOSION ANIMATION, etc). The die() method is abstract. All subclasses of Entity can handle die() however they want.

EntityManager's tick() method loops through all Entity objects in its list to call their tick() update method, and now checks if that Entity is no longer active (removing the Entity if its active flag is false).

//////////////////////////////////////////////////////////////////////

Player class's tick() method, now, also calls checkAttacks() at every game-loop tick(). A new method called checkAttacks() is added to the Player class. This method sets the Attack Rectangle's x and y starting point DEPENDING on which direction of attack RELATIVE TO THE PLAYER'S Collision Bound's x and y. Also sets the Attack Rectangle's width and height to a default size (20 pixels in our case). The last else-clause means DO NOT RUN the rest of the method because none of the attack keys are set to true. If Attack Rectangle x and y were set because the player pressed an attack key, we can BEGIN CHECKING for the attack after the if-else statements. Make sure not to attack self when looping through the entities list. Implemented attackTimer (similar to ANIMATIONS), see code's comments for details. SEE NOTEBOOK'S color-penciled DRAWING of attack-up (Watership Down word-bank notebook) FOR DETAILS ON THE EQUATIONS FROM IF-ELSE BLOCKS OF SETTING ATTACK RECTANGLE BOUNDS COORDINATE.